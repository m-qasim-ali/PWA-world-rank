{"version":3,"sources":["logo.svg","Data.js","Covid.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Data","covidData","flag","className","country","src","alt","cases","toLocaleString","recovered","active","deaths","todayCases","todayDeaths","Covid","useState","value","setvalue","setcountry","setcovidData","loading","setloading","setflag","fetchData","a","fetch","response","json","data","countryData","filter","c","countrycodes","codes","flagCode","name","code","console","log","useEffect","placeholder","type","onChange","e","target","style","width","onClick","replace","txt","charAt","toUpperCase","substr","toLowerCase","Object","entries","length","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7bb87b70.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react'\r\n\r\nfunction Data({covidData,flag}) {\r\n    return (\r\n        <>\r\n                <div className=\"text-light bg-secondary mb-3 w-100 d-flex align-items-center justify-content-center\">\r\n                    <h1>{covidData[0].country}</h1>\r\n                    <img className=\"ms-2\" src={`https://www.countryflags.io/${flag}/flat/64.png`} alt=\"\" />\r\n                </div>\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-xl-4 col-sm-10 col-md-6\">\r\n                        <div className=\"card text-dark bg-light mb-3\">\r\n                            <div className=\"card-header bg-dark text-light fs-4\">Total cases</div>\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"card-title text-center\">{covidData[0].cases.toLocaleString()}</h1>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-4 col-sm-10 col-md-6\">\r\n                        <div className=\"card text-dark bg-light mb-3\">\r\n                            <div className=\"card-header bg-dark text-light fs-4\">Recovered</div>\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"card-title text-center\">{covidData[0].recovered.toLocaleString()}</h1>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-4 col-sm-10 col-md-6\">\r\n                        <div className=\"card text-dark bg-light mb-3\">\r\n                            <div className=\"card-header bg-dark text-light fs-4\">Active</div>\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"card-title text-center\">{covidData[0].active.toLocaleString()}</h1>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-4 col-sm-10 col-md-6\">\r\n                        <div className=\"card text-dark bg-light mb-3\">\r\n                            <div className=\"card-header bg-dark text-light fs-4\">Total Deaths</div>\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"card-title text-center\">{covidData[0].deaths.toLocaleString()}</h1>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-4 col-sm-10 col-md-6\">\r\n                        <div className=\"card text-dark bg-light mb-3\">\r\n                            <div className=\"card-header bg-dark text-light fs-4\">Today cases</div>\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"card-title text-center\">{covidData[0].todayCases.toLocaleString()}</h1>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-4 col-sm-10 col-md-6\">\r\n                        <div className=\"card text-dark bg-light mb-3\">\r\n                            <div className=\"card-header bg-dark text-light fs-4\">Today Deaths</div>\r\n                            <div className=\"card-body\">\r\n                                <h1 className=\"card-title text-center\">{covidData[0].todayDeaths.toLocaleString()}</h1>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Data\r\n","import React,{ useState,useEffect } from 'react';\r\nimport Data from './Data';\r\n\r\nfunction Covid() {\r\n    const [value, setvalue] = useState();\r\n    const [country, setcountry] = useState('World');\r\n    const [covidData, setcovidData] = useState({})\r\n    const [loading, setloading] = useState(true);\r\n    const [flag, setflag] = useState(\"\")\r\n\r\n    function toTitleCase(str) {\r\n        return str.replace(\r\n          /\\w\\S*/g,\r\n          function(txt) {\r\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n    const fetchData = async()=>{\r\n        try{ \r\n            const response = await fetch('https://coronavirus-19-api.herokuapp.com/countries');\r\n            const data = await response.json();\r\n            const countryData=data.filter((c)=>{\r\n                return(country===c.country)\r\n            })\r\n            if (countryData){\r\n                setcovidData(countryData);\r\n                setloading(false)\r\n            }\r\n\r\n            const countrycodes = await fetch(\"https://gist.githubusercontent.com/DmytroLisitsyn/1c31186e5b66f1d6c52da6b5c70b12ad/raw/01b1af9b267471818f4f8367852bd4a2814cbae6/country_dial_info.json\")\r\n            const codes = await countrycodes.json();\r\n            const flagCode = codes.filter((c)=>{\r\n                return(c.name===country)\r\n            })\r\n            setflag(flagCode[0].code)\r\n        }\r\n        catch(error){\r\n            console.log(\"The error is \",error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [country])\r\n\r\n    \r\n    \r\n    \r\n\r\n    const submitValue=()=>{\r\n        setcountry(toTitleCase(value));\r\n        setcovidData({})\r\n        setloading(true);\r\n    }\r\n\r\n    useEffect(() =>{fetchData()}, [])\r\n\r\n\r\n    return (\r\n        <>  \r\n            <div className=\"container-fluid\">\r\n                <h1 className=\"text-center my-3\">Covid-19 Tracker</h1>\r\n                <div className=\"text-center\">\r\n                <input className=\"mb-3 w-25 p-2\" placeholder=\"Search by country name\" type=\"text\" onChange={(e)=>setvalue(e.target.value)} />\r\n                <button className=\"btn-dark text-light ms-2 p-2\" style={{width:'80px'}} onClick={submitValue}>Search</button>\r\n                </div>\r\n                {loading?<h1 className=\"d-flex justify-content-center align-items-center mt-5\">Loading....</h1>:Object.entries(covidData).length === 0?<h1 className=\"d-flex justify-content-center align-items-center mt-5\">No Data Found!</h1>:<Data covidData={covidData} flag={flag}/>}\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Covid\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Covid from './Covid'\n\nfunction App() {\n  return (\n    <>\n      <Covid />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}